<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Light Java - The fastest Java API Framework</title>
    <link>https://networknt.github.io/light-java/index.xml</link>
    <description>Recent content on Light Java - The fastest Java API Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Thu, 20 Oct 2016 14:34:09 -0400</lastBuildDate>
    <atom:link href="https://networknt.github.io/light-java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>security</title>
      <link>https://networknt.github.io/light-java/architecture/security/</link>
      <pubDate>Thu, 20 Oct 2016 14:34:09 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/architecture/security/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Note: If this is the first time you hear about OAuth2 or you want to getting familiar with
the grant types we are using, please read this
&lt;a href=&#34;https://github.com/networknt/undertow-oauth2/wiki/OAuth2-Introduction&#34;&gt;article&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;While designing microserivces, big monolithic application is breaking down to smaller
services that can be independently deployed or replaced. The final application will have
more http calls then a single application, how can we protect these calls between services?&lt;/p&gt;

&lt;p&gt;To protect APIs, the answer is OAuth2 and most simple and popular solution will be
simple web token as access token. The client authenticate itself on OAuth2 server and OAuth2
server issue
a simple web token (a UUID in most of the cases), then the client send the request to API
server with access token in the Authorization header. Once API server receives the request,
it has to send the access token to OAuth2 server to verify if this is valid token and if
this token is allowed to access this API. As you can see there must be a database lookup on
OAuth2 server to do that. Distributed cache help a lot but there is still a network call and
lookup for every single request. OAuth2 server eventually becomes a bottleneck and a single
point of failure.&lt;/p&gt;

&lt;p&gt;Years ago, when JWT draft spec. was out, I came up with the idea to do the
distributed security verification with JWT to replace Simple Web Token for one of the big
banks in Canada. At that time, there is nobody using JWT this way and the bank sent the design to
Paul Madson and John Bradley who are the Authors of OAuth2 and JWT specifications and got
their endorsement to use JWT this way.&lt;/p&gt;

&lt;p&gt;Here is the diagram of distributed JWT verification for microservices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/ms_distributed_jwt.png&#34; alt=&#34;ms_distributed_jwt&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gateway</title>
      <link>https://networknt.github.io/light-java/architecture/gateway/</link>
      <pubDate>Thu, 20 Oct 2016 14:33:53 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/architecture/gateway/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;When your organization is thinking about breaking up the big monolithic
application to adopt microservices architecture, chances are there are
some vendors coming to sell their gateway solutions. Why they want to
sell you gateways and do you really need a gateway?&lt;/p&gt;

&lt;p&gt;The reason they want to sell you a gateway is because the solutions they
provided are not truely microservices as there is no gateway in the
picture of the real microservices. Their solution is coming from web services
(SOA) design and all services behind the gateway are flattened.&lt;/p&gt;

&lt;p&gt;Here is a picture of their typical solution in the beginning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/ms_oauth2_gateway.png&#34; alt=&#34;ms_oauth2_gateway&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After awhile, they realized that for every request from client, there are two
calls from client and api to oauth2 server and remote calls are too heavy.&lt;/p&gt;

&lt;p&gt;Then the solution for gateway vendor is to move oauth2 server inside the
gateway so that there is no remote calls for security. Here is an updated
gateway.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/ms_oauth2_in_gateway.png&#34; alt=&#34;ms_oauth2_in_gateway&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With increasing volume, the monolithic gateway becomes bottleneck and the only
solutions is to horizontally scaling. That means you have a cluster of gateway
instances and gateway becomes a single point of failure. If any component fails
in gateway, all your APIs are not accessible.&lt;/p&gt;

&lt;p&gt;When you look inside the APIs protected by the gateway, you can see these APIs
are implemented in JEE containers like WebLogic/WebSphere/JBoss/SpringBoot etc.
and they don&amp;rsquo;t call each other. They are simply monolithic JEE application packaged
in ear or war and exposed REST APIs. These APIs are normally deployed in Data
Centers and lately moved to cloud. They are not real microservices at all.&lt;/p&gt;

&lt;p&gt;Some smart developers attempted to break these big application into smaller
pieces and move into the direction of microservices but gateway became a problem.
Let&amp;rsquo;s take a look at how API to API call looks like with gateway in the following
diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/ms_gateway_api_to_api.png&#34; alt=&#34;ms_gateway_api_to_api&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, when API A calls API B, although both of them are behind of the
gateway, the request has to go in front of gateway to properly
authenticate/authorize the request. Clearly, the centralized gateway design is
against the decentralized principle of microservices architecture.&lt;/p&gt;

&lt;p&gt;In my framework, the solution is to move all the cross cutting concerns to the
API framework and APIs are built on top of the framework. In another world, a
distributed gateway. Here is a diagram to show you client calls API A and API A
calls API B and API C and API B calls API D.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/ms_distributed_gateway.png&#34; alt=&#34;ms_distributed_gateway&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this architecture, every API instance contains functions from the framework
and act like a mini gateway embedded. Along with container orchestration tools like
Kubernetes or Docker Swarm, the traditional gateway is replaced. As there is no remote
calls between API to gateway, all the cross cutting concerns are addressed in the same
request/response chain. This gives you the best performance for your APIs. Here
is an &lt;a href=&#34;https://networknt.github.io/undertow-server/tutorials/microservices/&#34;&gt;tutorial&lt;/a&gt;
which implements the above diagram and source code for four APIs can
be found &lt;a href=&#34;https://github.com/networknt/undertow-server-example&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our framework is built on top of Undertow http core server which is very light
and serves 1.4 million &amp;ldquo;Hello World&amp;rdquo; requests on my desktop with average response
time 2ms. Is it 44 times faster then the most popular REST container Sprint Boot.&lt;/p&gt;

&lt;p&gt;The performance test code can be found in
&lt;a href=&#34;https://github.com/networknt/undertow-server-example/tree/master/performance&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above diagram, OAuth2 server is an independent entity and you might ask
if it is a bottleneck. I have written another &lt;a href=&#34;https://networknt.github.io/light-java/architecture/security&#34;&gt;document&lt;/a&gt; to address it with
distributed JWT token verification and client credentials token caching and renewal.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://networknt.github.io/light-java/getting-started/</link>
      <pubDate>Tue, 18 Oct 2016 07:00:45 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/getting-started/</guid>
      <description>

&lt;h2 id=&#34;code-generation&#34;&gt;Code Generation&lt;/h2&gt;

&lt;p&gt;The easiest way to start your API project is from OpenAPI specification and here is a video to
show you how to generate a project from swagger spec.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://youtu.be/xSJhF1LcE0Q&#34;&gt;light-java-getting-started&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://networknt.github.io/light-java/middleware/metrics/</link>
      <pubDate>Sat, 15 Oct 2016 20:42:32 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/metrics/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Metrics handler collects the API runtime information and report to Influxdb periodically
(5 minutes to 15 minutes based on the volume of the API). A Grafana instance is hooked to Influxdb
to output the metrics on dashboard from two different perspectives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Client oriented - client centric info to show how many APIs to call and each API runtime info.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;API oriented - API centric info to show how many clients is calling this API.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Here is an example of configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;Metrics handler configuration&amp;quot;,
  &amp;quot;enabled&amp;quot;: true,
  &amp;quot;influxdbHost&amp;quot;: &amp;quot;localhost&amp;quot;,
  &amp;quot;influxdbPort&amp;quot;: 8086,
  &amp;quot;influxdbName&amp;quot;: &amp;quot;metrics&amp;quot;,
  &amp;quot;influxdbUser&amp;quot;: &amp;quot;admin&amp;quot;,
  &amp;quot;influxdbPass&amp;quot;: &amp;quot;admin&amp;quot;,
  &amp;quot;reportInMinutes&amp;quot;: 5
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;influxdb-and-grafana&#34;&gt;InfluxDB and Grafana&lt;/h2&gt;

&lt;p&gt;Here is the docker-compose.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;influxdb:
  image: influxdb:latest
  container_name: influxdb
  ports:
    - &amp;quot;8083:8083&amp;quot;
    - &amp;quot;8086:8086&amp;quot;

grafana:
  image: grafana/grafana:latest
  container_name: grafana
  ports:
    - &amp;quot;3000:3000&amp;quot;
  links:
    - influxdb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;metrics-collected&#34;&gt;Metrics Collected&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/measurements.png&#34; alt=&#34;measurements&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there two perspectives in collecting metrics info. The measurements started with clientId are client
centric info and the measurements started with API name are API centric info.&lt;/p&gt;

&lt;p&gt;Currently, we are collecting 5 metrics each.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/client_metrics.png&#34; alt=&#34;client metrics&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is request count for client f7d42348-c647-4efb-a52d-4c5787421e72&lt;/p&gt;

&lt;p&gt;The first column is timestamp and value column is the value for this time series. Other columns are tags and they
are endpoint, hostname/container id, ipAddress and version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/api_metrics.png&#34; alt=&#34;api metrics&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is request count for API swagger_petstore.&lt;/p&gt;

&lt;p&gt;The first column is timestamp and value column is the value for this time series. Other columns are tags and they
are endpoint, hostname/container id, ipAddress and version.&lt;/p&gt;

&lt;h2 id=&#34;customization&#34;&gt;Customization&lt;/h2&gt;

&lt;p&gt;The default implementation is based on InfluxDB and Grafana which are the most popular combination
for docker containers. However, the database and dashboard can be replaced easily with another
reporter implementation. To replace it, change the MetricsHandler to use another reporter instead of
InfluxDB.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Server</title>
      <link>https://networknt.github.io/light-java/middleware/server/</link>
      <pubDate>Sat, 15 Oct 2016 19:27:03 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/server/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This module is responsible for managing life cycle of the embedded Undertow core http server. It starts the
server and initializes all middleware plugins along with route handler providers. It stops the server and
allow the resources to be released even someone click ctrl+c.&lt;/p&gt;

&lt;h2 id=&#34;middleware&#34;&gt;Middleware&lt;/h2&gt;

&lt;p&gt;Middleware plugins are the key components in the framework as they perform the heavy lifting behind the
scene. These components address the cross cutting concerns for all API implementation so that API developers
can focus on their domain logic only. Each component will have a config file (same name but with .json ext)
to control if the component will be enabled and its behavior. The framework has provide a list of the
middleware plugins and experience developers can add other plugins into the request/response chain.&lt;/p&gt;

&lt;p&gt;To add your own middleware plugins, update com.networknt.handler.MiddlewareHandler in
your API project folder src/main/resources/META-INF/services&lt;/p&gt;

&lt;p&gt;Here is the default middleware configuration generated by &lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This file is generated and should not be changed unless you want to plug in more handlers into the handler chain
# for cross cutting concerns. In most cases, you should replace some of the default handlers with your own implementation
# Please note: the sequence of these handlers are very important.

#Validator
com.networknt.validator.ValidatorHandler
#FullAudit
com.networknt.audit.FullAuditHandler
#SimpleAudit
com.networknt.audit.SimpleAuditHandler
#Body
com.networknt.body.BodyHandler
#Security
com.networknt.security.JwtVerifyHandler
#Swagger
com.networknt.swagger.SwaggerHandler
#Metrics
com.networknt.metrics.MetricsHandler
#Exception
com.networknt.exception.ExceptionHandler


&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;route-provider&#34;&gt;Route Provider&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt; generates all the handlers and corresponding
test cases based on OpenAPI specification. It also generate PathHandlerProvider to group these handlers
together. This class is loaded by the server via Java SPI. The config file
com.networknt.server.HandlerProvider can be found at /src/main/resources/META-INF/services&lt;/p&gt;

&lt;p&gt;Here is an example of the config.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;io.swagger.handler.PathHandlerProvider

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;server.json is the configuration file for this module. To make it simpler, it only ip and port are
configurable at the moment. Other server parameters are set for the best performance assuming clould
deployment. In the future, these parameters might be exposed in the server.json.&lt;/p&gt;

&lt;p&gt;Here is an exmaple of server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;localhost&amp;quot;,
  &amp;quot;port&amp;quot;: 8080
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Road Map</title>
      <link>https://networknt.github.io/light-java/roadmap/</link>
      <pubDate>Sat, 15 Oct 2016 19:19:57 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/roadmap/</guid>
      <description>&lt;p&gt;The REST API framework is used by one of the big banks in Canada and is in a process to be production
ready.&lt;/p&gt;

&lt;p&gt;The short term goal is to make sure the API framework is production ready.&lt;/p&gt;

&lt;p&gt;The mid term goal is to support GraphQL in the framework and make undertow-oauth2 server production ready.&lt;/p&gt;

&lt;p&gt;The long term goal is to build an API portal so that all APIs can be managed by the portal/marketplace.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>https://networknt.github.io/light-java/middleware/client/</link>
      <pubDate>Wed, 12 Oct 2016 19:59:08 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/client/</guid>
      <description>

&lt;p&gt;Client is used to call APIs from the following sources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Web server&lt;/li&gt;
&lt;li&gt;Standalone Application&lt;/li&gt;
&lt;li&gt;API&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It provides method to get authorization jwt token and automatically gets client
credentials token for scopes in API to API calls.&lt;/p&gt;

&lt;h1 id=&#34;sync-client&#34;&gt;Sync Client&lt;/h1&gt;

&lt;p&gt;This is a wrapper of Apache HttpClient with built-in connection pools and TLS
support. It can be used to call another API in the request context.&lt;/p&gt;

&lt;h1 id=&#34;async-client&#34;&gt;Async Client&lt;/h1&gt;

&lt;p&gt;This is a wrapper of Apache HttpAsyncClient with built-in connection pools and
TLS support. It should be used it multiple APIs will be called in the request
context.&lt;/p&gt;

&lt;h1 id=&#34;client-credentials-token-renew&#34;&gt;Client Credentials token renew&lt;/h1&gt;

&lt;p&gt;The renew of token happens behind the scene and it supports circuit breaker
is OAuth2 server is down or busy. It renew the token pro-actively before the
current one is expired and let all requests go with the current token. It only
block other request if the current request is trying to renew an expired token.
When token renew in this case fails, all request will be rejected with timeout
and subsequent requests the same until a grace period is passed so that the
renew process is start again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Development Flow</title>
      <link>https://networknt.github.io/light-java/management/flow/</link>
      <pubDate>Wed, 12 Oct 2016 19:30:08 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/management/flow/</guid>
      <description>

&lt;h2 id=&#34;development-flow&#34;&gt;Development Flow&lt;/h2&gt;

&lt;p&gt;There are three flows running in parallel but not started at the same time in API development&lt;/p&gt;

&lt;p&gt;API Specification starts the first and it will be done by data architect and business
analyst.&lt;/p&gt;

&lt;p&gt;API implementation starts when the first release of the specification is done by API
developers.&lt;/p&gt;

&lt;p&gt;Client implementations start almost the same time as API implementation team for mock API can
be generated from swagger specification immediately.&lt;/p&gt;

&lt;p&gt;During the process, specification might be changed and the changes will be propagated
to API implementation team and Client implementation team(s).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/api_flow.png&#34; alt=&#34;API Flow&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>validator</title>
      <link>https://networknt.github.io/light-java/middleware/validator/</link>
      <pubDate>Wed, 12 Oct 2016 19:13:19 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/validator/</guid>
      <description>

&lt;p&gt;The framework encourages design driven implementation so swagger specification
should be done before the implementation starts. With the swagger-codegen
undertow generator, the server stub can be generated and start running within
minutes. However, we cannot rely on generator for validation as specification
will be changed along  the life cycle of the API. This is why we have provided
a validator that works on top of the specification at runtime. In this way,
the generator should only be used once and the validator will take the latest
spec. and validate according the spec. at runtime.&lt;/p&gt;

&lt;h1 id=&#34;fail-fast&#34;&gt;Fail fast&lt;/h1&gt;

&lt;p&gt;As you may noticed that our Status object only supports one code and message.
This is the indication the framework validation is designed as fail fast.
Whenever there is an error, the server will stop processing the request and
return the error to the consumer immediately. There are two reasons on this
design:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Security - you don&amp;rsquo;t want to return so many errors if someone is trying
to hack your server.&lt;/li&gt;
&lt;li&gt;Performance - you don&amp;rsquo;t want to spend resource to handle invalid request
to the next step.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;validatorhandler&#34;&gt;ValidatorHandler&lt;/h1&gt;

&lt;p&gt;This is the entry point of the validator and it is injected during server
start up if validator.json enableValidator is true. By default, only
RequestValidator will be called. However, ResponseValidator can be enabled
by setting enableResponseValidator to true in validator.json.&lt;/p&gt;

&lt;h1 id=&#34;requestvalidator&#34;&gt;RequestValidator&lt;/h1&gt;

&lt;p&gt;It will validate the following:
* uri
* method
* header
* query parameters
* path parameters
* body if available&lt;/p&gt;

&lt;p&gt;When necessary, schema validator will be called to do json schema validation.&lt;/p&gt;

&lt;h1 id=&#34;responsevalidator&#34;&gt;ResponseValidator&lt;/h1&gt;

&lt;p&gt;It will validate the following:
* header
* response code
* body if available&lt;/p&gt;

&lt;p&gt;when necessary, json schema validator will be called.&lt;/p&gt;

&lt;h1 id=&#34;schemavalidator&#34;&gt;SchemaValidator&lt;/h1&gt;

&lt;p&gt;If schema is defined in swagger.json, then the &lt;a href=&#34;https://github.com/networknt/json-schema-validator&#34;&gt;json-schema-validator&lt;/a&gt; will be called to validate the input against a json schema defined in draft v4.&lt;/p&gt;

&lt;h1 id=&#34;test&#34;&gt;Test&lt;/h1&gt;

&lt;p&gt;In order to test validator, the test suite starts an undertow server and serves
petstore api for testing. It is a demo on how to unit test your API during
development.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>utility</title>
      <link>https://networknt.github.io/light-java/middleware/utility/</link>
      <pubDate>Wed, 12 Oct 2016 19:12:00 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/utility/</guid>
      <description>

&lt;p&gt;This module contains some useful classes that shared by multiple modules within
the framework.&lt;/p&gt;

&lt;h1 id=&#34;constants&#34;&gt;Constants&lt;/h1&gt;

&lt;p&gt;Contains all the constants shared by all modules.&lt;/p&gt;

&lt;h1 id=&#34;moduleregistry&#34;&gt;ModuleRegistry&lt;/h1&gt;

&lt;p&gt;When the plugin modules are loaded, it will register itself to this module along
with configuration. When /server/info is called, the endpoint will return all
plugged in modules and their configurations.&lt;/p&gt;

&lt;h1 id=&#34;util&#34;&gt;Util&lt;/h1&gt;

&lt;p&gt;Some useful utility method like uuid generator etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>swagger</title>
      <link>https://networknt.github.io/light-java/middleware/swagger/</link>
      <pubDate>Wed, 12 Oct 2016 19:10:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/swagger/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;The framework is designed based on swagger specification so it is our best interest
to utilize the swagger.json to its full potential. Currently there are two
components are using the swagger spec during runtime.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Security - verify scope in the JWT token against scope defined in swagger spec
if scope verificatio is true.&lt;/li&gt;
&lt;li&gt;Validator - validate request and response based on the definition in swagger
spec for the uri and method.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you have noticed, both components need to have swagger operation available
based on the current request uri and method combination.&lt;/p&gt;

&lt;h1 id=&#34;cache&#34;&gt;Cache&lt;/h1&gt;

&lt;p&gt;A specification file swagger.json should be in the config folder of your API
implementation and it will be loaded to memory with SwaggerHelper during server
start up. It will be cached in memory until the server is restarted.&lt;/p&gt;

&lt;h1 id=&#34;normalized-path&#34;&gt;Normalized Path&lt;/h1&gt;

&lt;p&gt;In order to match the incoming request path to the paths defined in the swagger
specification, all paths are normalized before matching action. SwaggerHelper
provides an API to match the request path to the paths in swagger specification.&lt;/p&gt;

&lt;h1 id=&#34;swaggerhandler&#34;&gt;SwaggerHandler&lt;/h1&gt;

&lt;p&gt;This is an HttpHandler to parse the swagger spec based on the request uri and
method and attach an SwaggerOperation object to the exchange. The security and
validator modules are using it to do their job without parsing the swagger second
time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>status</title>
      <link>https://networknt.github.io/light-java/middleware/status/</link>
      <pubDate>Wed, 12 Oct 2016 19:09:18 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/status/</guid>
      <description>

&lt;p&gt;In the scenario that error happens on the server, a Status object is designed
to encapsulate standard http response 4xx and 5xx as well as application specific
error code ERRXXXXX (prefixed with ERR with another 5 digits) and error message.
Additionally, an description of the error will be available for more info about
the error.&lt;/p&gt;

&lt;h1 id=&#34;data-elements&#34;&gt;Data Elements&lt;/h1&gt;

&lt;p&gt;Here are the four fields in the Status object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    int statusCode;
    String code;
    String message;
    String description;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;construct-the-object-from-status-json&#34;&gt;Construct the object from status.json&lt;/h1&gt;

&lt;p&gt;status.json is a configuration file that contains all the status error defined
for the application and it has the structure like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;ERR10000&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR10000&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;INVALID_AUTH_TOKEN&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Incorrect signature or malformed token in authorization header&amp;quot;
  },
  &amp;quot;ERR10001&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR10001&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;AUTH_TOKEN_EXPIRED&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Jwt token in authorization header expired&amp;quot;
  },
  .
  .
  .
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To construct the object from this config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    static final String STATUS_METHOD_NOT_ALLOWED = &amp;quot;ERR10008&amp;quot;;
    .
    .
    .
    Status status = new Status(STATUS_METHOD_NOT_ALLOWED);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To construct the object with arguments to have a description with context
information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   return new Status(&amp;quot;ERR11000&amp;quot;, queryParameter.getName(), swaggerOperation.getPathString().original());

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;convert-to-json-response&#34;&gt;Convert to JSON response.&lt;/h1&gt;

&lt;p&gt;There are several way to serialize the object to JSON in response. And string
concat is almost 10 times faster than Jackson ObjectMapper. For one million
objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Jackson Perf 503
ToString Perf 65

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;error-code-range-allocation&#34;&gt;Error code range allocation&lt;/h1&gt;

&lt;p&gt;The error code prefixed with ERR with another 5 digits so that it can be easily
scanned in log files. Also, certain error code can be used to trigger an alert
such as email or pager notification on system wide issues.&lt;/p&gt;

&lt;p&gt;In order to make sure there is no conflict for error code allocation between
teams, here is the rule&lt;/p&gt;

&lt;p&gt;10000-19999 reserved for the framework/system.
   * 10000-10100 security&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;11000-11999 validation&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;12000-12999 undertow-oauth2&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;20000-29999 common error codes within your business domain.
90000-99999 customize error code that cannot be found in common range.&lt;/p&gt;

&lt;h1 id=&#34;send-the-json-as-response&#34;&gt;Send the JSON as response&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;    Status status = new Status(STATUS_METHOD_NOT_ALLOWED);
    exchange.setStatusCode(status.getStatusCode());
    exchange.getResponseSender().send(status.toString());

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>security</title>
      <link>https://networknt.github.io/light-java/middleware/security/</link>
      <pubDate>Wed, 12 Oct 2016 19:07:43 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/security/</guid>
      <description>

&lt;p&gt;The current framework supports OAuth2 with JWT token but can be extended to
other authentication and authorization approaches.&lt;/p&gt;

&lt;h1 id=&#34;jwtverifyhandler&#34;&gt;JwtVerifyHandler&lt;/h1&gt;

&lt;p&gt;This is the handler that is injected during server start up if security.json
enableVerifyJwt is true. It does further scope verification if enableVerifyScope
is true against swagger specification.&lt;/p&gt;

&lt;h1 id=&#34;distributed-jwt-verification&#34;&gt;Distributed JWT verification&lt;/h1&gt;

&lt;p&gt;Unlike simple web token, the resource server has to contact Authorization server
to validate the bearer token. JWT can be verified by resource server as long as
the token signing certificate is available at resource server. Due to security
concerns, there should be two pair of private key and public key certificate
available at any time in case the primary key is compromised.&lt;/p&gt;

&lt;h1 id=&#34;light-oauth2-server&#34;&gt;light-oauth2 server&lt;/h1&gt;

&lt;p&gt;By default, the framework contains two pairs of public key certificates issued
by our own oauth2 server which can be installed from docker. For more info,
please refer to &lt;a href=&#34;https://github.com/networknt/light-oauth2&#34;&gt;https://github.com/networknt/light-oauth2&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;kid&#34;&gt;Kid&lt;/h1&gt;

&lt;p&gt;Since there are two certificates available, the kid in the header of the JWT
token will decide which certificate will be used to verify the JWT signature.&lt;/p&gt;

&lt;h1 id=&#34;jwtmockhandler&#34;&gt;JwtMockHandler&lt;/h1&gt;

&lt;p&gt;This is a testing OAuth2 endpoints provider and it can be injected into the handler
chain for unit testing so that it won&amp;rsquo;t depend on an instance of
undertow-oauth2.&lt;/p&gt;

&lt;h1 id=&#34;long-lived-token&#34;&gt;Long lived token&lt;/h1&gt;

&lt;p&gt;To make integration test easier, a long lived token is provided by the oauth2
server and it can be found at &lt;a href=&#34;https://github.com/networknt/undertow-oauth2&#34;&gt;https://github.com/networknt/undertow-oauth2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mask</title>
      <link>https://networknt.github.io/light-java/middleware/mask/</link>
      <pubDate>Wed, 12 Oct 2016 19:06:24 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/mask/</guid>
      <description>

&lt;p&gt;In the entire life cycle of the exchange, there might a lot of logging statements
written to log files or other persistence storage. These logs will be used to
assist production issue identifying and resolving and a wide group of people might
have access to these logs. In order to reduce the risk of leak customer info,
sensitive info needs to masked before logging. For example, credit card number,
sin number etc.&lt;/p&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;Given different API will have different sensitive data, the mask is configurable
and can be applied at header, cookie, query parameters and body.&lt;/p&gt;

&lt;h1 id=&#34;mask-with-string&#34;&gt;Mask with String&lt;/h1&gt;

&lt;h1 id=&#34;mask-with-regex&#34;&gt;Mask with Regex&lt;/h1&gt;

&lt;h1 id=&#34;mask-with-jsonpath&#34;&gt;Mask with JsonPath&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>info</title>
      <link>https://networknt.github.io/light-java/middleware/info/</link>
      <pubDate>Wed, 12 Oct 2016 19:04:51 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/info/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Almost every module in light-java has a configuration file that can be
externalized with default can be in the module itself or the API implementation
config folder. In order to give an overview of the server runtime, system
properties, specification as well as configurations for each enabled modules,
there is a special handler that can be included in your swagger specification.&lt;/p&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;info.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;Server info endpoint that can output environment and component along with configuration&amp;quot;,
  &amp;quot;enableServerInfo&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike other modules, server info handler is not plugin into the handler chain
during server start up. It should be part of the swagger specification and
route to this handler in the routing handler. If enableServerInfo is false,
then an error message will returned with ERR10013 - SERVER_INFO_DISABLED.&lt;/p&gt;

&lt;h2 id=&#34;swagger&#34;&gt;Swagger&lt;/h2&gt;

&lt;p&gt;Along with other endpoints/paths defined in the swagger specification, an
extra endpoint should be added with special oauth2 scope for this handler.
It is recommended to use /basePath/server/info so that some automatic tool
or API portal server can access to it in a standard way.&lt;/p&gt;

&lt;h2 id=&#34;extension&#34;&gt;Extension&lt;/h2&gt;

&lt;p&gt;For other contributed modules or API application specific modules, please
following the following guideline to register your module
in /basePath/server/info endpoint.&lt;/p&gt;

&lt;p&gt;For handlers, it is registered when injecting into the handler chain during
server start up.
For other utilities, it should have a static block to register itself during
server start up.&lt;/p&gt;

&lt;p&gt;Here is the example code to register module and its config.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ModuleRegistry.registerModule(ValidatorHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ValidatorHandler.CONFIG_NAME), null);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mask-sensitive-data-in-config&#34;&gt;Mask sensitive data in config&lt;/h2&gt;

&lt;p&gt;When module registers itself, it provide the configuration in JSON format for
the module. Some components have sensitive info in their configuration, for
example, db password, client secret etc. The third parameter in registerModule
is a list of keys in the configuration file that need to be masked.&lt;/p&gt;

&lt;p&gt;Here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; masks = new ArrayList&amp;lt;String&amp;gt;();
masks.add(&amp;quot;trustPass&amp;quot;);
masks.add(&amp;quot;keyPass&amp;quot;);
ModuleRegistry.registerModule(Client.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), masks);

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output&#34;&gt;Output&lt;/h2&gt;

&lt;p&gt;Here is the output from undertow swagger-codegen petstore specification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;environment&amp;quot;: {
    &amp;quot;host&amp;quot;: {
      &amp;quot;ip&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
      &amp;quot;hostname&amp;quot;: &amp;quot;joy&amp;quot;,
      &amp;quot;dns&amp;quot;: &amp;quot;localhost&amp;quot;
    },
    &amp;quot;runtime&amp;quot;: {
      &amp;quot;availableProcessors&amp;quot;: 4,
      &amp;quot;freeMemory&amp;quot;: 430837608,
      &amp;quot;totalMemory&amp;quot;: 504889344,
      &amp;quot;maxMemory&amp;quot;: 7486832640
    },
    &amp;quot;system&amp;quot;: {
      &amp;quot;javaVendor&amp;quot;: &amp;quot;Oracle Corporation&amp;quot;,
      &amp;quot;javaVersion&amp;quot;: &amp;quot;1.8.0_66&amp;quot;,
      &amp;quot;osName&amp;quot;: &amp;quot;Linux&amp;quot;,
      &amp;quot;osVersion&amp;quot;: &amp;quot;4.2.0-42-generic&amp;quot;,
      &amp;quot;userTimezone&amp;quot;: &amp;quot;America/Toronto&amp;quot;
    }
  },
  &amp;quot;specification&amp;quot;: {
    &amp;quot;basePath&amp;quot;: &amp;quot;/v2&amp;quot;,
    &amp;quot;paths&amp;quot;: {
      &amp;quot;/pet&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Add a new pet to the store&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;addPet&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;application/json&amp;quot;,
            &amp;quot;application/xml&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Pet object that needs to be added to the store&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;405&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid input&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;put&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Update an existing pet&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;updatePet&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;application/json&amp;quot;,
            &amp;quot;application/xml&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Pet object that needs to be added to the store&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Pet not found&amp;quot;
            },
            &amp;quot;405&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Validation exception&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/findByStatus&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Finds Pets by status&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Multiple status values can be provided with comma separated strings&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;findPetsByStatus&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;status&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Status values that need to be considered for filter&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
              &amp;quot;items&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                &amp;quot;enum&amp;quot;: [
                  &amp;quot;available&amp;quot;,
                  &amp;quot;pending&amp;quot;,
                  &amp;quot;sold&amp;quot;
                ],
                &amp;quot;default&amp;quot;: &amp;quot;available&amp;quot;
              },
              &amp;quot;collectionFormat&amp;quot;: &amp;quot;multi&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
                }
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid status value&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/findByTags&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Finds Pets by tags&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;findPetsByTags&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;tags&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Tags to filter by&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
              &amp;quot;items&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
              },
              &amp;quot;collectionFormat&amp;quot;: &amp;quot;multi&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
                }
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid tag value&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;deprecated&amp;quot;: true,
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/{petId}&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Find pet by ID&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Returns a single pet&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getPetById&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet to return&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Pet not found&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;api_key&amp;quot;: []
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Updates a pet in the store with form data&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;updatePetWithForm&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;application/x-www-form-urlencoded&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet that needs to be updated&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Updated name of the pet&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;status&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Updated status of the pet&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;405&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid input&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/x-www-form-urlencoded&amp;quot;
        },
        &amp;quot;delete&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Deletes a pet&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;deletePet&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Pet id to delete&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Pet not found&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/{petId}/uploadImage&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;uploads an image&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;uploadFile&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;multipart/form-data&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet to update&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;additionalMetadata&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Additional data to pass to server&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;file&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;file to upload&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;file&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/ApiResponse&amp;quot;
              }
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;multipart/form-data&amp;quot;
        }
      },
      &amp;quot;/store/inventory&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Returns pet inventories by status&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Returns a map of status codes to quantities&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getInventory&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
                &amp;quot;additionalProperties&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
                }
              }
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;api_key&amp;quot;: []
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/store/order&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Place an order for a pet&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;placeOrder&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;order placed for purchasing the pet&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Order&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Order&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid Order&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/store/order/{orderId}&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Find purchase order by ID&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;For valid response try integer IDs with value &amp;gt;= 1 and &amp;lt;= 10. Other values will generated exceptions&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getOrderById&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;orderId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet that needs to be fetched&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;maximum&amp;quot;: 10,
              &amp;quot;minimum&amp;quot;: 1,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Order&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Order not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;delete&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Delete purchase order by ID&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;deleteOrder&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;orderId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of the order that needs to be deleted&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;minimum&amp;quot;: 1,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Order not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Create user&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;This can only be done by the logged in user.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;createUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Created user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/createWithArray&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Creates list of users with given input array&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;createUsersWithArrayInput&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;List of user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
                }
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/createWithList&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Creates list of users with given input array&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;createUsersWithListInput&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;List of user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
                }
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/login&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Logs user into the system&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;loginUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The user name for login&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;password&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The password for login in clear text&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
              },
              &amp;quot;headers&amp;quot;: {
                &amp;quot;X-Rate-Limit&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
                  &amp;quot;description&amp;quot;: &amp;quot;calls per hour allowed by the user&amp;quot;
                },
                &amp;quot;X-Expires-After&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot;,
                  &amp;quot;description&amp;quot;: &amp;quot;date in UTC when token expires&amp;quot;
                }
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid username/password supplied&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/logout&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Logs out current logged in user session&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;logoutUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/{username}&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Get user by user name&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getUserByName&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The name that needs to be fetched. Use user1 for testing. &amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid username supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;User not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;put&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Updated user&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;This can only be done by the logged in user.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;updateUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;name that need to be updated&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Updated user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid user supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;User not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;delete&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Delete user&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;This can only be done by the logged in user.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;deleteUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The name that needs to be deleted&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid username supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;User not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      }
    },
    &amp;quot;host&amp;quot;: &amp;quot;petstore.swagger.io&amp;quot;,
    &amp;quot;schemes&amp;quot;: [
      &amp;quot;http&amp;quot;
    ],
    &amp;quot;externalDocs&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Find out more about Swagger&amp;quot;,
      &amp;quot;url&amp;quot;: &amp;quot;http://swagger.io&amp;quot;
    },
    &amp;quot;securityDefinitions&amp;quot;: {
      &amp;quot;petstore_auth&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
        &amp;quot;authorizationUrl&amp;quot;: &amp;quot;http://petstore.swagger.io/oauth/dialog&amp;quot;,
        &amp;quot;flow&amp;quot;: &amp;quot;implicit&amp;quot;,
        &amp;quot;scopes&amp;quot;: {
          &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
          &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
        }
      },
      &amp;quot;api_key&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;apiKey&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
        &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;
      }
    },
    &amp;quot;definitions&amp;quot;: {
      &amp;quot;Order&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;petId&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;quantity&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
          },
          &amp;quot;shipDate&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot;
          },
          &amp;quot;status&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;Order Status&amp;quot;,
            &amp;quot;enum&amp;quot;: [
              &amp;quot;placed&amp;quot;,
              &amp;quot;approved&amp;quot;,
              &amp;quot;delivered&amp;quot;
            ]
          },
          &amp;quot;complete&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;boolean&amp;quot;,
            &amp;quot;default&amp;quot;: false
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Order&amp;quot;
        }
      },
      &amp;quot;Category&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Category&amp;quot;
        }
      },
      &amp;quot;User&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;username&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;firstName&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;lastName&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;email&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;password&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;phone&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;userStatus&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;User Status&amp;quot;
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;User&amp;quot;
        }
      },
      &amp;quot;Tag&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Tag&amp;quot;
        }
      },
      &amp;quot;ApiResponse&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;code&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
          },
          &amp;quot;type&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;message&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        }
      },
      &amp;quot;Pet&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;required&amp;quot;: [
          &amp;quot;name&amp;quot;,
          &amp;quot;photoUrls&amp;quot;
        ],
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;category&amp;quot;: {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Category&amp;quot;
          },
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;example&amp;quot;: &amp;quot;doggie&amp;quot;
          },
          &amp;quot;photoUrls&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
            &amp;quot;xml&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;photoUrl&amp;quot;,
              &amp;quot;wrapped&amp;quot;: true
            },
            &amp;quot;items&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          },
          &amp;quot;tags&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
            &amp;quot;xml&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;tag&amp;quot;,
              &amp;quot;wrapped&amp;quot;: true
            },
            &amp;quot;items&amp;quot;: {
              &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Tag&amp;quot;
            }
          },
          &amp;quot;status&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;pet status in the store&amp;quot;,
            &amp;quot;enum&amp;quot;: [
              &amp;quot;available&amp;quot;,
              &amp;quot;pending&amp;quot;,
              &amp;quot;sold&amp;quot;
            ]
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Pet&amp;quot;
        }
      }
    },
    &amp;quot;swagger&amp;quot;: &amp;quot;2.0&amp;quot;,
    &amp;quot;info&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.&amp;quot;,
      &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
      &amp;quot;title&amp;quot;: &amp;quot;Swagger Petstore&amp;quot;,
      &amp;quot;termsOfService&amp;quot;: &amp;quot;http://swagger.io/terms/&amp;quot;,
      &amp;quot;contact&amp;quot;: {
        &amp;quot;email&amp;quot;: &amp;quot;apiteam@swagger.io&amp;quot;
      },
      &amp;quot;license&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
        &amp;quot;url&amp;quot;: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
      }
    },
    &amp;quot;tags&amp;quot;: [
      {
        &amp;quot;name&amp;quot;: &amp;quot;pet&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Everything about your Pets&amp;quot;,
        &amp;quot;externalDocs&amp;quot;: {
          &amp;quot;description&amp;quot;: &amp;quot;Find out more&amp;quot;,
          &amp;quot;url&amp;quot;: &amp;quot;http://swagger.io&amp;quot;
        }
      },
      {
        &amp;quot;name&amp;quot;: &amp;quot;store&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Access to Petstore orders&amp;quot;
      },
      {
        &amp;quot;name&amp;quot;: &amp;quot;user&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Operations about user&amp;quot;,
        &amp;quot;externalDocs&amp;quot;: {
          &amp;quot;description&amp;quot;: &amp;quot;Find out more about our store&amp;quot;,
          &amp;quot;url&amp;quot;: &amp;quot;http://swagger.io&amp;quot;
        }
      }
    ]
  },
  &amp;quot;component&amp;quot;: [
    {
      &amp;quot;moduleName&amp;quot;: &amp;quot;com.networknt.info.ServerInfoHandler&amp;quot;,
      &amp;quot;config&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;Server info endpoint that can output environment and component along with configuration&amp;quot;,
        &amp;quot;enableServerInfo&amp;quot;: true
      }
    },
    {
      &amp;quot;moduleName&amp;quot;: &amp;quot;com.networknt.validator.ValidatorHandler&amp;quot;,
      &amp;quot;config&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;Validate request/response against swagger spec during runtime&amp;quot;,
        &amp;quot;enableValidator&amp;quot;: true,
        &amp;quot;enableResponseValidator&amp;quot;: false
      }
    },
    {
      &amp;quot;moduleName&amp;quot;: &amp;quot;com.networknt.info.SimpleAuditHandler&amp;quot;,
      &amp;quot;config&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;controls how audit info should be logged. FullAudit is not recommended on produciton if performance is important&amp;quot;,
        &amp;quot;enableFullAudit&amp;quot;: false,
        &amp;quot;simple&amp;quot;: {
          &amp;quot;statusCode&amp;quot;: true,
          &amp;quot;responseTime&amp;quot;: true,
          &amp;quot;headers&amp;quot;: [
            &amp;quot;correlationId&amp;quot;,
            &amp;quot;traceabilityId&amp;quot;,
            &amp;quot;clientId&amp;quot;,
            &amp;quot;userId&amp;quot;,
            &amp;quot;scopeClientId&amp;quot;,
            &amp;quot;endpoint&amp;quot;
          ]
        },
        &amp;quot;enableSimpleAudit&amp;quot;: true,
        &amp;quot;full&amp;quot;: {
          &amp;quot;enableMask&amp;quot;: true,
          &amp;quot;request&amp;quot;: {
            &amp;quot;headers&amp;quot;: [
              &amp;quot;contentType&amp;quot;,
              &amp;quot;characterEncoding&amp;quot;
            ],
            &amp;quot;cookies&amp;quot;: true,
            &amp;quot;queryParameters&amp;quot;: true,
            &amp;quot;body&amp;quot;: true
          },
          &amp;quot;response&amp;quot;: {
            &amp;quot;headers&amp;quot;: true,
            &amp;quot;cookies&amp;quot;: true,
            &amp;quot;body&amp;quot;: true,
            &amp;quot;statusCode&amp;quot;: true,
            &amp;quot;contentLength&amp;quot;: true
          }
        }
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>