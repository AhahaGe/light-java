<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Undertow Server - The fastest Java API Framework</title>
    <link>https://networknt.github.io/undertow-server/index.xml</link>
    <description>Recent content on Undertow Server - The fastest Java API Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sun, 09 Oct 2016 08:15:27 -0400</lastBuildDate>
    <atom:link href="https://networknt.github.io/undertow-server/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>spring is bloated</title>
      <link>https://networknt.github.io/undertow-server/architecture/spring-is-bloated/</link>
      <pubDate>Sun, 09 Oct 2016 08:15:27 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/architecture/spring-is-bloated/</guid>
      <description></description>
    </item>
    
    <item>
      <title>jee is out</title>
      <link>https://networknt.github.io/undertow-server/architecture/jee-is-out/</link>
      <pubDate>Sun, 09 Oct 2016 08:14:57 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/architecture/jee-is-out/</guid>
      <description></description>
    </item>
    
    <item>
      <title>microservices</title>
      <link>https://networknt.github.io/undertow-server/architecture/microservices/</link>
      <pubDate>Sun, 09 Oct 2016 08:13:52 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/architecture/microservices/</guid>
      <description></description>
    </item>
    
    <item>
      <title>index</title>
      <link>https://networknt.github.io/undertow-server/architecture/</link>
      <pubDate>Sun, 09 Oct 2016 08:13:17 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/architecture/</guid>
      <description></description>
    </item>
    
    <item>
      <title>microservices</title>
      <link>https://networknt.github.io/undertow-server/tutorials/microservices/</link>
      <pubDate>Sun, 09 Oct 2016 08:01:56 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/tutorials/microservices/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;These days light weight container like Docker is getting traction, more and more API services are developed for
docker container and deployed to the cloud. In this environment, traditional heavy weight containers like
JEE and Spring are losing ground as it doesn&amp;rsquo;t make sense to have a heavy weight container wrapped with a light
weight docker container. Docker and container orchestration tools like Kubenetes or Docker Swarm are replacing
all the functionalities JEE provides without hogging resources.&lt;/p&gt;

&lt;p&gt;Another clear trend is standalone Gateway is phasing out in the cloud
environment with docker containers as most of the traditional gateway
features are replaced by container orchestration tool and docker container
management tool. In addition, some of the cross cutting concerns gateway
provided are addressed in API framework.&lt;/p&gt;

&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;

&lt;p&gt;Undertow Server Framework encourage Design Driven API building and &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34;&gt;OpenAPI
Specification&lt;/a&gt; is the central
piece to drive the runtime for security and validation. Also, the
specification can be used to scaffold a running server project the first time
so that developers can focus their efforts on the domain business logic
implementation without worrying about how each components wired together.&lt;/p&gt;

&lt;p&gt;To create swagger specification, the best tool is
&lt;a href=&#34;http://swagger.io/swagger-editor/&#34;&gt;swagger-editor&lt;/a&gt; and I have an
[article]() in
tools section to describe how to use it.&lt;/p&gt;

&lt;p&gt;By following the [instructions]()
on how to use the editor, let&amp;rsquo;s create four APIs in swagger repo.&lt;/p&gt;

&lt;p&gt;API A will call API B and API C to fulfill its request and API B will call API D
to fulfill its request.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;API A -&amp;gt; API B -&amp;gt; API D
         -&amp;gt; API C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the API A swagger.yaml and others can be found &lt;a href=&#34;https://github.com/networknt/swagger&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger: &#39;2.0&#39;

info:
  version: &amp;quot;1.0.0&amp;quot;
  title: API A for microservices demo
  description: API A is called by consumer directly and it will call API B and API C to get data
  contact:
    email: stevehu@gmail.com
  license:
    name: &amp;quot;Apache 2.0&amp;quot;
    url: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
host: a.networknt.com
schemes:
  - http
basePath: /v1

consumes:
  - application/json
produces:
  - application/json

paths:
  /data:
    get:
      description: Return an array of strings collected from down stream APIs
      operationId: listData
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfStrings
            type: array
            items:
              type: string
      security:
        - a_auth:
          - api_a.w
          - api_a.r

securityDefinitions:
  a_auth:
    type: oauth2
    authorizationUrl: http://localhost:8080/oauth2/code
    flow: implicit
    scopes:
      api_a.w: write access
      api_a.r: read access
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;swagger-codegen&#34;&gt;Swagger-Codegen&lt;/h2&gt;

&lt;h2 id=&#34;handlers&#34;&gt;Handlers&lt;/h2&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;h2 id=&#34;dockerization&#34;&gt;Dockerization&lt;/h2&gt;

&lt;h2 id=&#34;oauth2-security&#34;&gt;OAuth2 Security&lt;/h2&gt;

&lt;h2 id=&#34;integration&#34;&gt;Integration&lt;/h2&gt;

&lt;h2 id=&#34;performance&#34;&gt;Performance&lt;/h2&gt;

&lt;h2 id=&#34;production&#34;&gt;Production&lt;/h2&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Swagger codegen to generate server stub skeleton</title>
      <link>https://networknt.github.io/undertow-server/tools/swagger-codegen/</link>
      <pubDate>Sat, 08 Oct 2016 22:14:59 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/tools/swagger-codegen/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swagger cli to convert/bundle specification files</title>
      <link>https://networknt.github.io/undertow-server/tools/swagger-cli/</link>
      <pubDate>Sat, 08 Oct 2016 22:14:47 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/tools/swagger-cli/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swagger Editor for OpenAPI Specification</title>
      <link>https://networknt.github.io/undertow-server/tools/swagger-editor/</link>
      <pubDate>Sat, 08 Oct 2016 22:14:33 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/tools/swagger-editor/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://swagger.io/&#34;&gt;Swagger&lt;/a&gt; is a simple yet powerful representation of your RESTful API. With the largest
ecosystem of API tooling on the planet, thousands of developers are supporting Swagger in almost every modern
programming language and deployment environment. With a Swagger-enabled API, you get interactive documentation,
client SDK generation and discoverability.&lt;/p&gt;

&lt;p&gt;Swagger was created to help fulfill the promise of APIs and is 100% open source software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://swagger.io/specification/&#34;&gt;The Swagger specification&lt;/a&gt; defines a set of files required to describe an API.
These files can then be used by the Swagger-UI project to display the API and Swagger-codegen to generate clients
or servers in various languages. Additional utilities can also take advantage of the resulting files, such as
testing tools.&lt;/p&gt;

&lt;h2 id=&#34;swagger-editor&#34;&gt;Swagger Editor&lt;/h2&gt;

&lt;h3 id=&#34;specification-management&#34;&gt;Specification Management&lt;/h3&gt;

&lt;p&gt;If you only have one API to be built, you can save your specification anywhere and you don&amp;rsquo;t need any external
references; however, you might work for an organization which is building hundreds or thousands APIs and there
are so many shared references between APIs like common headers, error status etc. In this case, it is recommended
to create a separate repo for specification only. Normally, it will be called swagger.&lt;/p&gt;

&lt;p&gt;Within this folder, each api will have its own sub folder and common shared references will be in the root folder.&lt;/p&gt;

&lt;p&gt;Swagger spec. can be edited in yaml or json format but most people will be using yaml format and we are stick to it.&lt;/p&gt;

&lt;h3 id=&#34;using-the-online-editor&#34;&gt;Using the online editor&lt;/h3&gt;

&lt;p&gt;To access the Swagger online editor, click the following link.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://editor.swagger.io/#/&#34;&gt;Online Swagger Editor&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To create a new specification - File &amp;ndash;&amp;gt; New&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To import an existing specification from the File &amp;ndash;&amp;gt; Import File &amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To save/export the specification in YAML format - File &amp;ndash;&amp;gt; Download YAML.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Online editor work if you are working on only one API without any externalized references. If you want to work with
multiple APIs, you have to run the editor locally.&lt;/p&gt;

&lt;h3 id=&#34;running-editor-locally&#34;&gt;Running editor locally&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  git clone https://github.com/swagger-api/swagger-editor.git
  cd swagger-editor
  npm install
  npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your default browser will be started and point to 127.0.0.1:8080/# with a sample specification loaded.&lt;/p&gt;

&lt;h3 id=&#34;create-a-new-specification&#34;&gt;Create a new specification&lt;/h3&gt;

&lt;p&gt;The swagger-editor serves the static files via an HTTP server. To work on API specifications, the simplest way
is to clone the swagger repository directly in the Swagger editor folder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd swagger-editor
git clone https://github.com/networknt/swagger.git
cd swagger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When saving/exporting your specification, please use swagger.yaml filename in your API sub folder under swagger.
Common object specifications are located in the root folder of the /swagger repository. Ex. header.yaml,
error.yaml, etc. To refer these common specification files in API specification&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ref: &#39;swagger/error.yaml#/error&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;useful-links&#34;&gt;Useful links&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://swagger.io/specification/&#34;&gt;OpenAPI Specification&lt;/a&gt;
&lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/tree/master/examples/v2.0&#34;&gt;Official Examples&lt;/a&gt;
&lt;a href=&#34;https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-1-introduction/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>wrk performance test</title>
      <link>https://networknt.github.io/undertow-server/tools/wrk-perf/</link>
      <pubDate>Sat, 08 Oct 2016 21:47:07 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/tools/wrk-perf/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;For most API frameworks in Java, the server can only handle up to ten thousands request per second and Apache JMeter
or Apache Bench will do the job. However, when we are talking about millions requests per second undertow-server
handles, they won&amp;rsquo;t work as these tools will use up all the cpu resources. For high performance testing,
&lt;a href=&#34;https://github.com/wg/wrk&#34;&gt;wrk&lt;/a&gt; is the best as it can send tens of millions requests per seconds on a
commodity hardware.&lt;/p&gt;

&lt;p&gt;Another limitation on high performance throughput test is network limitation. Unless you client and server a connected
with 10G network, chances are the network will be the bottle net and you cannot reach the full handling potential of
you http server. To work around it, most of my tests are running on the same computer in order to gauge the raw server
throughput and latency.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wg/wrk/wiki/Installing-Wrk-on-Linux&#34;&gt;Install on Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wg/wrk/wiki/Installing-wrk-on-OSX&#34;&gt;Install on Mac&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;basic&#34;&gt;Basic&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;wrk -t12 -c400 -d30s http://localhost:8080/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;12 threads&lt;/p&gt;

&lt;p&gt;400 concurrent connections&lt;/p&gt;

&lt;p&gt;30 seconds duration&lt;/p&gt;

&lt;h3 id=&#34;pipeline&#34;&gt;Pipeline&lt;/h3&gt;

&lt;p&gt;If you want to bump up number of requests, use pipeline&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the pipeline.lua script&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;init = function(args)
   request_uri = args[1]
   depth = tonumber(args[2]) or 1

   local r = {}
   for i=1,depth do
     r[i] = wrk.format(nil, request_uri)
   end
   req = table.concat(r)
end

request = function()
   return req
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;For some output examples, you can find at &lt;a href=&#34;https://github.com/networknt/undertow-server-example/tree/master/performance&#34;&gt;undertow-server-example/performance&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo for project documentation on github</title>
      <link>https://networknt.github.io/undertow-server/tools/hugo-docs/</link>
      <pubDate>Sat, 08 Oct 2016 19:25:24 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/tools/hugo-docs/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This tutorial is written for Linux and Mac; however, it should be hard to follow it by Windows users.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For most open source developers, they would ues github.com to manage their projects and then have a README.md
for documentation. For some bigger project they might have wiki for additional documents and linked them to
README.md.&lt;/p&gt;

&lt;p&gt;Here I will introduce another way to manage documents in gh-pages with &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; static site
generator.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;h3 id=&#34;hugo&#34;&gt;Hugo&lt;/h3&gt;

&lt;p&gt;For Linux, download the binary from the &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;latest release&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am using hugo_0.27-64bit.deb on ubuntu and install it with the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo dpkg -i hugo_0.17-64bit.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To verify that Hugo is installed successful.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Mac, the easiest way to use Homebrew.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update &amp;amp;&amp;amp; brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pygments&#34;&gt;Pygments&lt;/h3&gt;

&lt;p&gt;The Hugo executable has one optional external dependency for source code highlighting (Pygments). To install it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install Pygments
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;enable-hugo-bash-auto-completion&#34;&gt;Enable Hugo Bash Auto-Completion&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo hugo gen autocomplete
. /etc/bash_completion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you type hugo followed by a few TABs, you will see the commands that Hugo recommended.&lt;/p&gt;

&lt;h2 id=&#34;create-gh-pages-branch&#34;&gt;Create gh-pages branch&lt;/h2&gt;

&lt;p&gt;GitHub Pages will serve up a website for any repository that has a branch called gh-pages with a valid index.html
file at that branch’s root.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an orphaned gh-pages branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To set up a Project Pages site, you need to create a new &amp;ldquo;orphan&amp;rdquo; branch (a branch that has no common history with
 an existing branch) in your repository. The safest way to do this is to start with a fresh clone:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone github.com/user/repository.git
cd repository
git checkout --orphan gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Remove all files to create an empty working directory&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;git rm -rf .

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Add test index.html and push&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;My Page&amp;quot; &amp;gt; index.html
git add index.html
git commit -a -m &amp;quot;initial checkin&amp;quot;
git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Test your site&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After push to gh-pages, your site will be available at the following url.&lt;/p&gt;

&lt;p&gt;https://&lt;username&gt;.github.io/&lt;projectname&gt;&lt;/p&gt;

&lt;h2 id=&#34;scaffold-docs-site&#34;&gt;Scaffold docs site&lt;/h2&gt;

&lt;p&gt;First switch to master branch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new docs site&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site docs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have a docs directory in your project root folder and some empty sub directories under docs. By default, git
will not commit empty directories to the repository. To work around it, we can include .gitkeep file in each of these
directories.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for DIR in `ls -p | grep /`; do touch ${DIR}.gitkeep; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To verify that these files are created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -name .gitkeep
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;config&#34;&gt;Config&lt;/h2&gt;

&lt;p&gt;Copy the content of &lt;a href=&#34;https://raw.githubusercontent.com/networknt/undertow-server/master/docs/config.toml&#34;&gt;my config&lt;/a&gt;
into config.toml under docs and update it accordingly&lt;/p&gt;

&lt;h2 id=&#34;theme&#34;&gt;Theme&lt;/h2&gt;

&lt;p&gt;I am using hugo-material-docs theme and here is the steps to install it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd docs/themes
git clone git@github.com:digitalcraftsman/hugo-material-docs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;content&#34;&gt;Content&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s create the first page and test it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From docs folder, run&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;hugo new index.md
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Find the file docs/content/index.md and update it with some testing content&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the server and test it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From docs folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Now you about.md can be accessed at
&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;projectname&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;deploy&#34;&gt;Deploy&lt;/h2&gt;

&lt;p&gt;Get the deploy.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Fetch the deployment script into the root of your source tree, make it executable.
wget https://github.com/X1011/git-directory-deploy/raw/master/deploy.sh &amp;amp;&amp;amp; chmod +x deploy.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From docs folder run the following command to publish your site to gh-pages. This can be repeated every time you
want to publish your site.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# For setting it up to build to a folder other than &amp;quot;dist&amp;quot;, see the options in deploy.sh.
# Build the site to /dist.
hugo -d dist

# Run the deploy.sh script installed above.
./deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you document site can be accessed from https://&lt;username&gt;.github.io/&lt;projectname&gt;&lt;/p&gt;

&lt;h2 id=&#34;check-in&#34;&gt;Check in&lt;/h2&gt;

&lt;p&gt;You site is up and running now, let&amp;rsquo;s check it in before adding more documents&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ..
git add .
git commit -m &amp;quot;add docs for documentation&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Middleware Handlers</title>
      <link>https://networknt.github.io/undertow-server/middleware/</link>
      <pubDate>Fri, 07 Oct 2016 22:02:13 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/middleware/</guid>
      <description>&lt;p&gt;this is middleware md&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://networknt.github.io/undertow-server/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://undertow.io/&#34;&gt;Undertow&lt;/a&gt; is  one of the fastest Java HTTP servers available and
JBoss WildFly is based on it.&lt;/p&gt;

&lt;p&gt;Performance comparison with others can be found
at &lt;a href=&#34;https://www.techempower.com/benchmarks/#section=data-r12&amp;amp;hw=peak&amp;amp;test=plaintext&#34;&gt;www.techempower.com&lt;/a&gt; and
a simple Hello World server got 1.2 million requests per second on my I5 4 CPU desktop.
&lt;a href=&#34;https://www.networknt.com/blog/All/CeHJjNRjRiS1dH1qqme2LQ&#34;&gt;Here&lt;/a&gt; is a blog that compares
it with Go 1.6&lt;/p&gt;

&lt;p&gt;In addition, I have performance comparison with the most popular REST API framework Spring
Boot in &lt;a href=&#34;https://github.com/networknt/undertow-server-example/tree/master/performance&#34;&gt;undertow-server-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although it is fast, reliable and widely used but the programming style is a little
strange for traditional JEE developers as it uses handler chain for request processing.
Of course, you can use servlet contain on top of it but you are losing the performance
edge by a big margin.&lt;/p&gt;

&lt;p&gt;In order to make use this server more efficiently, I have built a framework called
&lt;a href=&#34;https://github.com/networknt/light&#34;&gt;Light&lt;/a&gt; that is based on it with event sourcing
and graph database. The framework is used to host both my sites
&lt;a href=&#34;www.networknt.com&#34;&gt;www.networknt.com&lt;/a&gt;
and &lt;a href=&#34;www.edibleforestgarden.ca&#34;&gt;www.edibleforestgarden.ca&lt;/a&gt; on a single ip address.&lt;/p&gt;

&lt;p&gt;The light framework is complex and has both backend and frontend with blog, news,
forum and e-commerce built-in. Some developers/users asked me if I could provide a
simple framework that just supports REST API build for backend only.&lt;/p&gt;

&lt;p&gt;And this is how undertow framework was born. The framework contains three part that work
together to have a total solution for containerized microservices.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/undertow-server&#34;&gt;undertow-server&lt;/a&gt; to build API&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/undertow-portal&#34;&gt;undertow-oauth2&lt;/a&gt; to control API access&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/undertow-oauth2&#34;&gt;undertow-portal&lt;/a&gt; to manage client and API&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>