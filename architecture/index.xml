<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture-rsses on Undertow Server - The fastest Java API Framework</title>
    <link>https://networknt.github.io/undertow-server/architecture/index.xml</link>
    <description>Recent content in Architecture-rsses on Undertow Server - The fastest Java API Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sun, 09 Oct 2016 08:15:27 -0400</lastBuildDate>
    <atom:link href="https://networknt.github.io/undertow-server/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>spring is bloated</title>
      <link>https://networknt.github.io/undertow-server/architecture/spring-is-bloated/</link>
      <pubDate>Sun, 09 Oct 2016 08:15:27 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/architecture/spring-is-bloated/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Over the years, Spring seemed to be the replacement of JEE servers with IoC
container and light weight servlet container as its foundation. Especially
recently, Spring Boot brings in an easy development model and increases
developer productivity dramatically.&lt;/p&gt;

&lt;p&gt;However, there are two issues or limitations in Spring applications.&lt;/p&gt;

&lt;h3 id=&#34;spring-is-bloated-and-it-becoming-too-heavy&#34;&gt;Spring is bloated and it becoming too heavy&lt;/h3&gt;

&lt;p&gt;When Spring was out, it was only a small core with IoC contains and it was
fast and easy to use. Now, I cannot even count how many Spring Components
available. In order to complete with JEE, Spring basically implemented all
replacements of JEE and these are heavy components.&lt;/p&gt;

&lt;h3 id=&#34;spring-is-based-on-old-servlet-api-and-it-is-slow&#34;&gt;Spring is based on old servlet API and it is slow.&lt;/h3&gt;

&lt;p&gt;Another issue with Spring is due to the foundation of servlet container
which was designed over ten years ago without multi-core, NIO etc in
consideration. There is a little improvement in Servlet 3.1 but it wasn&amp;rsquo;t
right due to backward compatible requirement.&lt;/p&gt;

&lt;p&gt;I did a performance test between Spring Boot and My own Undertow Framework
and Spring Boot is 44 times slower and the code and test result can be
found &lt;a href=&#34;https://github.com/networknt/undertow-server-example/tree/master/performance&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The test result for Spring Boot was based on the embedded tomcat server and
later on I have switched to Undertow servlet container for Spring Boot. The
Undertow Servlet container is faster but still over 20 times slower then
Undertow Framework.&lt;/p&gt;

&lt;p&gt;The 20 times difference between the two is due to Servlet overhead and Sprint
Boot overhead and it is very significant.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jee is dead</title>
      <link>https://networknt.github.io/undertow-server/architecture/jee-is-dead/</link>
      <pubDate>Sun, 09 Oct 2016 08:14:57 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/architecture/jee-is-dead/</guid>
      <description>

&lt;h2 id=&#34;history&#34;&gt;History&lt;/h2&gt;

&lt;p&gt;When Java was out, big players like IBM, BEA, Oracle etc. saw a great opportunity
to make money as it is a great language for web programming. But how can you make
big money around a programming language? The answer is to build servers on top
of it and make it complicated so big corporations will pay big bucks for it. That
is why we have JEE specs, JSRs, Weblogic, Websphere and other servers.&lt;/p&gt;

&lt;p&gt;Large packages are deployed on these servers that are run so slow and used too
much memory. Development and Debugging within a container was a nightmare for
developers and they usually paid well to compensating the pain.&lt;/p&gt;

&lt;p&gt;Because of resource usage is too high, you could not find public hosting company
to support Java with a reasonable price tag for a long time. You want to build a
website in Java, you have to pay big bucks for hosting even you might just use a
Servlet container.&lt;/p&gt;

&lt;p&gt;For a long time, Java was used within enterprises and big corporations as only
they can afford million-dollar application servers and well paid enterprise level
developers. I myself have been riding the train since beginning as a JEE
consultant☺&lt;/p&gt;

&lt;p&gt;In 2003, Rod Johnson released Spring Framework and it allows IoC and POJO for
development without EJBs. The productivity increment is huge and a lot of
developers jumped onto it and thrown J2EE EJBs out of the  window. The application
server vendors saw this and in JEE5, they provide some features to make developer
more productive and less painful. Unfortunately, today’s [Spring Framework is so
bloated]() like JEE containers and it still based on JEE servlet container which was
designed over ten years ago and without considering multiple cores and NIO.&lt;/p&gt;

&lt;p&gt;During this period of time, PHP was flying. It uses less memory and resource and
was well supported by hosting companies. Some CMS platform built on PHP like
WordPress, Drupal etc. drove a lot of open source developers into PHP. Although
PHP is the most popular language these days, it has its shortcomings. It is slow
and hard to make it scalable.&lt;/p&gt;

&lt;p&gt;In 2009, Ryan Dahl introduced Node.js that supports asynchronous, non-blocking
and event-driven I/O. This increase the response rate dramatically as the server
threads are well utilized and the throughput of a single server can be comparable
to a cluster of JEE servers. Node.js is a very good design but it has its
limitations. It is hard to scale and hard to integrate with existing legacy systems.&lt;/p&gt;

&lt;p&gt;In 2014, a new player Undertow came in town and it is Java based non-blocking web
server. From techempower.com &lt;a href=&#34;https://www.techempower.com/benchmarks/#section=data-r12&amp;amp;hw=peak&amp;amp;test=plaintext&#34;&gt;test&lt;/a&gt;,
it serves millions requests per second
on a single $8000 dell server using the same test case Google claimed to serve
1 million requests with a cluster. It is lightweight with the core coming under
1Mb and a simple embedded server uses less than 4Mb of heap space.&lt;/p&gt;

&lt;p&gt;With the new Undertow Core, we&amp;rsquo;ve built Undertow Framework which is aiming containerized
microserivces. It supports design driven approach from OpenAPI specification to
generate code and drive security and validation during runtime.&lt;/p&gt;

&lt;h2 id=&#34;jee-vendors&#34;&gt;JEE vendors&lt;/h2&gt;

&lt;p&gt;Years ago, JEE vendors like Oracle and IBM spent billions dollars to develop their
application servers and these servers (WebLogic and WebSphere) will be sold for millions
dollars to big organizations. Now it is hard to sell these servers as JBoss is grabbing
market share quickly and Oracle is &lt;a href=&#34;https://developers.slashdot.org/story/16/07/02/1639241/oracle-may-have-stopped-funding-and-developing-java-ee&#34;&gt;dropping JEE support&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With microservices gainning traction, the application servers are hard to sell as these
servers are used to host monolithic applications which is hard to management. I used to
work on an application that have hundreds of EJBs and it took 45 minutes to build and deploy
on WebLogic to test a single line change.&lt;/p&gt;

&lt;h2 id=&#34;jee-customers&#34;&gt;JEE customers&lt;/h2&gt;

&lt;p&gt;From vendors&amp;rsquo;s perspective, it is not worth to buy these applications as all the promises
of JEE are not true. You build an application for WebSphere cannot be deployed on WebLogic
and you have to spend money to upgrade your application to newer version of the application
server as the old version is not supported anymore. And these upgrade cost millions of
dollars plug the cost of the new application servers.&lt;/p&gt;

&lt;p&gt;Some smart people start to ask questions. Why we need to deploy our application to these
monster servers? Why we need to package our application as ear or war instead of just a
jar? Why cannot we break the big application to smaller pieces and deploy and scale them
independently.&lt;/p&gt;

&lt;h2 id=&#34;microservices&#34;&gt;Microservices&lt;/h2&gt;

&lt;p&gt;The answer for these questions is microservices. Wikipedia defines microservices as
&amp;ldquo;&amp;hellip;a software architecture style in which complex applications are composed of small,
independent processes communicating with each other using language-agnostic APIs.
These services are small, highly decoupled and focus on doing a small task,
facilitating a modular approach to system-building.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Jason Bloomberg, president of Intellyx, talks about the distinction between a typical
web service and a microservice, arguing against the tendency to try to simply rebrand
web services as microservices in this &lt;a href=&#34;http://techbeacon.com/dangers-microservices-washing-get-value-strip-away-hype&#34;&gt;article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microservices are not Web Services on enterprise service buses (ESBs). And it is not
the traditional service-oriented architecture (SOA), while it inherits some of the
basic principles of SOA, it&amp;rsquo;s fundamentally a different set of practices—because the
entire environment has completely transformed.&lt;/p&gt;

&lt;p&gt;The environment for microservices architecture, in contrast, is the borderless
enterprise: end-to-end, cloud-centric digital applications leveraging fully
virtualized and containerized infrastructure. Containers take applications and
services down to a self-contained, component level, and DevOps provides the framework
for the IT infrastructure and automation to develop, deploy, and manage the
environment.&lt;/p&gt;

&lt;p&gt;Microservices don&amp;rsquo;t require containers (or vice versa), but they&amp;rsquo;re easily
containerizable by design. Furthermore, if you&amp;rsquo;re implementing containers,
it&amp;rsquo;s difficult and typically unwise to put any new executable code other than
microservices in them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>microservices</title>
      <link>https://networknt.github.io/undertow-server/architecture/microservices/</link>
      <pubDate>Sun, 09 Oct 2016 08:13:52 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/architecture/microservices/</guid>
      <description></description>
    </item>
    
    <item>
      <title>index</title>
      <link>https://networknt.github.io/undertow-server/architecture/</link>
      <pubDate>Sun, 09 Oct 2016 08:13:17 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/architecture/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>