<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools-rsses on Undertow Server - The fastest Java API Framework</title>
    <link>https://networknt.github.io/undertow-server/tools/index.xml</link>
    <description>Recent content in Tools-rsses on Undertow Server - The fastest Java API Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sat, 08 Oct 2016 19:25:24 -0400</lastBuildDate>
    <atom:link href="https://networknt.github.io/undertow-server/tools/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to use hugo for project documentation on github</title>
      <link>https://networknt.github.io/undertow-server/tools/hugo-docs/</link>
      <pubDate>Sat, 08 Oct 2016 19:25:24 -0400</pubDate>
      
      <guid>https://networknt.github.io/undertow-server/tools/hugo-docs/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This tutorial is written for Linux and Mac; however, it should be hard to follow it by Windows users.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For most open source developers, they would ues github.com to manage their projects and then have a README.md
for documentation. For some bigger project they might have wiki for additional documents and linked them to
README.md.&lt;/p&gt;

&lt;p&gt;Here I will introduce another way to manage documents in gh-pages with &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; static site
generator.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;h3 id=&#34;hugo&#34;&gt;Hugo&lt;/h3&gt;

&lt;p&gt;For Linux, download the binary from the &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;latest release&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am using hugo_0.27-64bit.deb on ubuntu and install it with the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo dpkg -i hugo_0.17-64bit.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To verify that Hugo is installed successful.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Mac, the easiest way to use Homebrew.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update &amp;amp;&amp;amp; brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pygments&#34;&gt;Pygments&lt;/h3&gt;

&lt;p&gt;The Hugo executable has one optional external dependency for source code highlighting (Pygments). To install it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install Pygments
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;enable-hugo-bash-auto-completion&#34;&gt;Enable Hugo Bash Auto-Completion&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo hugo gen autocomplete
. /etc/bash_completion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you type hugo followed by a few TABs, you will see the commands that Hugo recommended.&lt;/p&gt;

&lt;h2 id=&#34;create-gh-pages-branch&#34;&gt;Create gh-pages branch&lt;/h2&gt;

&lt;p&gt;GitHub Pages will serve up a website for any repository that has a branch called gh-pages with a valid index.html
file at that branchâ€™s root.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an orphaned gh-pages branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To set up a Project Pages site, you need to create a new &amp;ldquo;orphan&amp;rdquo; branch (a branch that has no common history with
 an existing branch) in your repository. The safest way to do this is to start with a fresh clone:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone github.com/user/repository.git
cd repository
git checkout --orphan gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Remove all files to create an empty working directory&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;git rm -rf .

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Add test index.html and push&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;My Page&amp;quot; &amp;gt; index.html
git add index.html
git commit -a -m &amp;quot;initial checkin&amp;quot;
git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Test your site&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After push to gh-pages, your site will be available at the following url.&lt;/p&gt;

&lt;p&gt;https://&lt;username&gt;.github.io/&lt;projectname&gt;&lt;/p&gt;

&lt;h2 id=&#34;scaffold-docs-site&#34;&gt;Scaffold docs site&lt;/h2&gt;

&lt;p&gt;First switch to master branch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new docs site&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site docs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have a docs directory in your project root folder and some empty sub directories under docs. By default, git
will not commit empty directories to the repository. To work around it, we can include .gitkeep file in each of these
directories.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for DIR in `ls -p | grep /`; do touch ${DIR}.gitkeep; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To verify that these files are created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -name .gitkeep
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;config&#34;&gt;Config&lt;/h2&gt;

&lt;p&gt;Copy the content of &lt;a href=&#34;https://raw.githubusercontent.com/networknt/undertow-server/master/docs/config.toml&#34;&gt;my config&lt;/a&gt;
into config.toml under docs and update it accordingly&lt;/p&gt;

&lt;h2 id=&#34;theme&#34;&gt;Theme&lt;/h2&gt;

&lt;p&gt;I am using hugo-material-docs theme and here is the steps to install it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd docs/themes
git clone git@github.com:digitalcraftsman/hugo-material-docs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;content&#34;&gt;Content&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s create the first page and test it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From docs folder, run&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;hugo new index.md
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Find the file docs/content/index.md and update it with some testing content&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the server and test it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From docs folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Now you about.md can be accessed at
&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;projectname&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;deploy&#34;&gt;Deploy&lt;/h2&gt;

&lt;p&gt;From docs folder run the following command to publish your site to gh-pages&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Fetch the deployment script into the root of your source tree, make it executable.
wget https://github.com/X1011/git-directory-deploy/raw/master/deploy.sh &amp;amp;&amp;amp; chmod +x deploy.sh

# For setting it up to build to a folder other than &amp;quot;dist&amp;quot;, see the options in deploy.sh.
# Build the site to /dist.
hugo -d dist

# Run the deploy.sh script installed above.
./deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you document site can be accessed from https://&lt;username&gt;.github.io/&lt;projectname&gt;&lt;/p&gt;

&lt;h2 id=&#34;check-in&#34;&gt;Check in&lt;/h2&gt;

&lt;p&gt;You site is up and running now, let&amp;rsquo;s check it in before adding more documents&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ..
git add .
git commit -m &amp;quot;add docs for documentation&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>