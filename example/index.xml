<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Example-rsses on Light Java - The fastest Java API Framework</title>
    <link>https://networknt.github.io/light-java/example/index.xml</link>
    <description>Recent content in Example-rsses on Light Java - The fastest Java API Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sat, 22 Oct 2016 21:02:01 -0400</lastBuildDate>
    <atom:link href="https://networknt.github.io/light-java/example/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>swagger</title>
      <link>https://networknt.github.io/light-java/example/swagger/</link>
      <pubDate>Sat, 22 Oct 2016 21:02:01 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/swagger/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This is a project that contains all the swagger specifications for examples. Currently, only petstore.yaml and petstore.json are there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>routing</title>
      <link>https://networknt.github.io/light-java/example/routing/</link>
      <pubDate>Sat, 22 Oct 2016 21:00:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/routing/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This is an example to show you how to use undertow routing handler.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Performance</title>
      <link>https://networknt.github.io/light-java/example/performance/</link>
      <pubDate>Sat, 22 Oct 2016 20:55:36 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/performance/</guid>
      <description>

&lt;p&gt;This is an example to compare performance between other microservices
platforms and Light Java framework. Source code can be found &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/performance&#34;&gt;here&lt;/a&gt;
with the testing result on my desktop.&lt;/p&gt;

&lt;h2 id=&#34;test-results&#34;&gt;Test Results&lt;/h2&gt;

&lt;p&gt;Here is the light-java server performance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$  wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     2.46ms    3.83ms  85.33ms   89.36%
    Req/Sec   366.70k    62.79k  714.24k    79.06%
  Latency Distribution
     50%    1.05ms
     75%    2.69ms
     90%    6.58ms
     99%   17.43ms
  43814624 requests in 30.07s, 4.33GB read
Requests/sec: 1457257.99
Transfer/sec:    147.31MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the spring-boot-tomcat (tomcat embedded) performance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$  wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    82.93ms  108.77ms   1.58s    89.45%
    Req/Sec     8.40k     3.68k   22.19k    68.54%
  Latency Distribution
     50%   45.66ms
     75%  101.59ms
     90%  197.72ms
     99%  542.87ms
  995431 requests in 30.09s, 119.79MB read
Requests/sec:  33086.22
Transfer/sec:      3.98MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the spring-boot-undertow (undertow embedded) performance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$ wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    38.94ms   39.29ms 456.82ms   89.28%
    Req/Sec    11.21k     4.97k   28.16k    68.14%
  Latency Distribution
     50%   27.58ms
     75%   49.62ms
     90%   80.73ms
     99%  201.87ms
  1331312 requests in 30.08s, 192.98MB read
Requests/sec:  44260.61
Transfer/sec:      6.42MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, light-java is 44 times faster then sprint-boot with tomcat embedded just
for the raw performance to serve Hello World!&lt;/p&gt;

&lt;p&gt;In order to have a closer comparison, I have created another project spring-boot-undertow with embedded
undertow servlet container (light-java is using undertow core only) and the
performance is getting a little better. Light-Java is about 33 times faster than spring-boot with undertow embedded.&lt;/p&gt;

&lt;p&gt;Upon requests from the community, I have added nodejs and golang examples and here are the testing result.&lt;/p&gt;

&lt;p&gt;Node express framework.
To start the server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd node-express
npm install
node server.js

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$ wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    22.30ms   24.35ms 592.24ms   49.18%
    Req/Sec    10.70k     0.87k   11.95k    94.82%
  Latency Distribution
     50%   47.94ms
     75%    0.00us
     90%    0.00us
     99%    0.00us
  1274289 requests in 30.02s, 279.51MB read
Requests/sec:  42443.34
Transfer/sec:      9.31MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go Standard Http&lt;/p&gt;

&lt;p&gt;To start the server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd go-http
go run server.go -prefork
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The testing result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$ wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    15.01ms   15.35ms 180.11ms   87.10%
    Req/Sec    42.80k     5.46k   62.49k    70.58%
  Latency Distribution
     50%   10.03ms
     75%   19.96ms
     90%   34.55ms
     99%   72.99ms
  5123194 requests in 30.08s, 630.28MB read
Requests/sec: 170313.02
Transfer/sec:     20.95MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go FastHttp&lt;/p&gt;

&lt;p&gt;To start the server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd go-fasthttp
go run server.go -prefork

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The testing result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$ wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    99.98ms  127.12ms 653.72ms   82.12%
    Req/Sec   351.24k    46.23k  525.74k    77.09%
  Latency Distribution
     50%   30.76ms
     75%  175.44ms
     90%  299.14ms
     99%  476.20ms
  41989168 requests in 30.06s, 4.93GB read
Requests/sec: 1396685.83
Transfer/sec:    167.83MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After I post this online, one of spring developers recommended to test against Spring Boot with Reactor
which is Netty based without servlet container. I am very new to this and might miss something and everyone
is welcomed to submit pull request to enhance this project.&lt;/p&gt;

&lt;p&gt;Here is the test result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$ wrk -t4 -c128 -d30s http://localhost:3000 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:3000
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     7.44ms   12.88ms 285.71ms   94.23%
    Req/Sec    61.44k    12.25k   88.29k    79.23%
  Latency Distribution
     50%    4.62ms
     75%    8.11ms
     90%   15.03ms
     99%   42.60ms
  7305649 requests in 30.03s, 536.48MB read
Requests/sec: 243240.17
Transfer/sec:     17.86MB

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>microservices</title>
      <link>https://networknt.github.io/light-java/example/microservices/</link>
      <pubDate>Sat, 22 Oct 2016 20:48:04 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/microservices/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This example contains four projects:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/api_a&#34;&gt;API A&lt;/a&gt; is calling &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/api_b&#34;&gt;API B&lt;/a&gt; and &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/api_c&#34;&gt;API C&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;API B is calling &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/api_d&#34;&gt;API D&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example shows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to build microservices&lt;/li&gt;
&lt;li&gt;How to do API to API call with light-java client component&lt;/li&gt;
&lt;li&gt;How to protect API with JWT token with scopes&lt;/li&gt;
&lt;li&gt;How to performance test APIs with wrk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a &lt;a href=&#34;https://networknt.github.io/light-java/tutorials/microservices/&#34;&gt;tutorial&lt;/a&gt; for these projects.&lt;/p&gt;

&lt;p&gt;Note: these projects are not 100% completed yet. I am going to dockerize them and then compose them with OAuth2 server.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>petstore</title>
      <link>https://networknt.github.io/light-java/example/petstore/</link>
      <pubDate>Sat, 22 Oct 2016 20:40:35 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/petstore/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/petstore&#34;&gt;Petstore&lt;/a&gt; is a generated API project based on OpenAPI specification found &lt;a href=&#34;http://petstore.swagger.io/v2/swagger.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This project will be updated constantly when a new version of light-java framework released or any updates in swagger-codegen.&lt;/p&gt;

&lt;p&gt;Here is the command line to generate this project from swagger-codegen directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i http://petstore.swagger.io/v2/swagger.json -l light-java -o ~/networknt/light-java-example/petstore

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>database</title>
      <link>https://networknt.github.io/light-java/example/database/</link>
      <pubDate>Sat, 22 Oct 2016 20:22:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/database/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This example can be found at &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/database&#34;&gt;https://github.com/networknt/light-java-example/tree/master/database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are three parts in this projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An API implemented on top of light-java framework.&lt;/li&gt;
&lt;li&gt;Mysql database as part of the docker compose with init script.&lt;/li&gt;
&lt;li&gt;Postgres database as part of the docker compose with init script.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The project shows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use &lt;a href=&#34;https://github.com/brettwooldridge/HikariCP&#34;&gt;HikariCP&lt;/a&gt; for JDBC connection pool.&lt;/li&gt;
&lt;li&gt;How to initialize database connection pool and plug it into light-java startup hooks.&lt;/li&gt;
&lt;li&gt;How to dockerize light-java application.&lt;/li&gt;
&lt;li&gt;How to compose databases with light-java application so that you can start all servers together.&lt;/li&gt;
&lt;li&gt;How to performance test API application with wrk.&lt;/li&gt;
&lt;li&gt;Postgres performs better than mysql on my i5 desktop.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>